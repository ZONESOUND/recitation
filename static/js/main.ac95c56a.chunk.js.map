{"version":3,"sources":["components/Speak.js","usages/socketUsage.js","usages/tool.js","usages/config.js","components/SocketHandler.js","components/App.js","serviceWorker.js","index.js"],"names":["Speak","defaultSocket","props","synth","window","speechSynthesis","useState","getVoices","voices","voiceIndex","changeVoice","pitch","setPitch","rate","setRate","speaking","setSpeaking","onvoiceschanged","v","i","length","default","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","speakOver","speakTxt","txt","utterThis","SpeechSynthesisUtterance","voice","speak","undefined","sentence","console","log","onSubmit","event","preventDefault","value","onChange","e","target","map","index","key","name","lang","htmlFor","type","step","serverHost","defaultConnectFn","connectSocket","namespace","fn","socket","io","on","onSocket","str","emitData","data","emit","SocketHandler","setSpeak","setSentence","setId","text","onClick","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uQAoEeA,ICjEXC,EDiEWD,EAjEf,SAAeE,GACb,IAAMC,EAAQC,OAAOC,gBADD,EAEQC,mBAASH,EAAMI,aAFvB,mBAEbC,EAFa,KAELD,EAFK,OAGcD,mBAAS,GAHvB,mBAGbG,EAHa,KAGDC,EAHC,OAIMJ,mBAAS,GAJf,mBAIbK,EAJa,KAINC,EAJM,OAKIN,mBAAS,GALb,mBAKbO,EALa,KAKPC,EALO,OAMYR,oBAAS,GANrB,mBAMbS,EANa,KAMHC,EANG,KAiBpBb,EAAMc,gBAVc,WAElB,IADA,IAAIC,EAAIf,EAAMI,YACLY,EAAE,EAAGA,EAAED,EAAEE,OAAQD,IACxB,GAAID,EAAEC,GAAGE,QAAS,CAChBX,EAAYS,GACZ,MAGJZ,EAAUW,IEhBP,SAAqBI,EAAUC,GACpC,IAAMC,EAAgBC,mBAEtBC,qBAAU,WACRF,EAAcG,QAAUL,KAG1BI,qBAAU,WAIR,GAAc,OAAVH,EAAgB,CAClB,IAAIK,EAAKC,aAJX,WACEL,EAAcG,YAGaJ,GAC3B,OAAO,kBAAMO,cAAcF,OAE5B,CAACL,IFIJQ,EAAY,WACL5B,EAAMY,WAEPb,EAAM8B,YACNhB,GAAY,MAEfD,EAAW,IAAM,MAEpB,IAKIkB,EAAW,SAACC,GACd,IAAIC,EAAY,IAAIC,yBAAyBF,GAC7CC,EAAUE,MAAQ7B,EAAOC,GACzB0B,EAAUxB,MAAQA,EAClBwB,EAAUtB,KAAOA,EACjBV,EAAMmC,MAAMH,IAWd,OAPKpB,GAAYb,EAAMoC,YAA4BC,IAAnBrC,EAAMsC,WACpCxB,GAAY,GACZyB,QAAQC,IAAI,iBAAkBxC,EAAMsC,UACpCP,EAAS/B,EAAMsC,WAKf,0BAAMG,SAtBI,SAACC,GACXA,EAAMC,iBACNZ,EAAS,WAqBP,4BAAQa,MAAOrC,EAAYsC,SAAU,SAACC,GAAOtC,EAAYsC,EAAEC,OAAOH,SAC/DtC,EAAO0C,KAAI,SAACJ,EAAOK,GAClB,OAAO,4BAAQC,IAAKD,EAAOL,MAAOK,GAA3B,UAAsCL,EAAMO,KAA5C,aAAqDP,EAAMQ,KAA3D,UAGX,6BACA,2BAAOC,QAAQ,SAAf,SACA,2BAAOC,KAAK,SAASC,KAAM,IAAMX,MAAOnC,EAAOoC,SAAU,SAACC,GAAKpC,EAASoC,EAAEC,OAAOH,QAASlB,GAAG,UAC7F,6BACA,2BAAO2B,QAAQ,QAAf,QACA,2BAAOC,KAAK,SAASC,KAAM,IAAMX,MAAOjC,EAAOkC,SAAU,SAACC,GAAKlC,EAAQkC,EAAEC,OAAOH,QAASlB,GAAG,SAC5F,2BAAO4B,KAAK,a,iBG/DLE,EAAa,6CFMtBC,EAAmB,YACD,EAClBlB,QAAQC,IAAI,6BAmBLkB,EAAgB,WAAuC,IAAtCC,EAAqC,uDAA3B,GAAIC,EAAuB,uDAApBH,EAErCI,EAASC,IAAGN,EAAWG,GAG3B,YAFsBtB,IAAlBtC,IAA6BA,EAAgB8D,GACjDA,EAAOE,GAAG,UAAWH,GACdC,GAUAG,EAAW,SAACC,EAAKL,GAA6B,IAAzBC,EAAwB,uDAAjB9D,OACbsC,IAAlBtC,GACJ8D,EAAOE,GAAGE,EAAKL,IAsBRM,EAAW,SAACf,EAAMgB,GAA+B,IAAzBN,EAAwB,uDAAjB9D,EACtC8D,EAAOO,KAAKjB,EAAMgB,IG7BPE,MAlCf,WAA0B,IAAD,EACKjE,oBAAS,GADd,mBACdgC,EADc,KACPkC,EADO,OAEWlE,qBAFX,mBAEdkC,EAFc,KAEJiC,EAFI,OAGDnE,oBAAU,GAHT,mBAGdsB,EAHc,KAGV8C,EAHU,KA4BrB,OAxBApE,oBAAS,WACLsD,EAAc,aACdM,EAAS,SAAS,SAACG,GACf5B,QAAQC,IAAI2B,MAEhBH,EAAS,SAAS,SAACG,GAEV/B,IACDmC,EAAYJ,EAAKM,MACjBD,EAAML,EAAKzC,IACX4C,GAAS,UAcb,oCACJ,4BAAQI,QAVI,WACZR,EAAS,QAAS,cAUlB,kBAAC,EAAD,CAAO9B,MAAOA,EAAOE,SAAUA,EAAUR,UAR7B,WACZwC,GAAS,GACT/B,QAAQC,IAAI,aAAcd,GAE1BwC,EAAS,YAAa,CAACxC,GAAIA,SCjBpBiD,MARf,WAEE,OAAQ,oCACN,kBAAC,EAAD,QCIgBC,QACW,cAA7B1E,OAAO2E,SAASC,UAEe,UAA7B5E,OAAO2E,SAASC,UAEhB5E,OAAO2E,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ac95c56a.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport { useInterval } from '../usages/tool';\n\nfunction Speak(props) {\n  const synth = window.speechSynthesis;  \n  const [voices, getVoices] = useState(synth.getVoices());\n  const [voiceIndex, changeVoice] = useState(0);\n  const [pitch, setPitch] = useState(1);\n  const [rate, setRate] = useState(1);\n  const [speaking, setSpeaking] = useState(false);\n  let populateVoice = () => {\n    let v = synth.getVoices();\n    for (var i=0; i<v.length; i++) {\n      if (v[i].default) {\n        changeVoice(i);\n        break;\n      }\n    }\n    getVoices(v);\n  }\n  synth.onvoiceschanged = populateVoice;\n  useInterval(() => {\n    if (!synth.speaking) {\n        //console.log('finish speak!');\n        props.speakOver();\n        setSpeaking(false);\n    }\n  }, speaking ? 400 : null);\n\n  let speak = (event) => {\n    event.preventDefault();\n    speakTxt('hello');\n  }\n\n  let speakTxt = (txt) => {\n    let utterThis = new SpeechSynthesisUtterance(txt);\n    utterThis.voice = voices[voiceIndex];\n    utterThis.pitch = pitch;\n    utterThis.rate = rate;\n    synth.speak(utterThis);\n\n  }\n\n  if (!speaking && props.speak && props.sentence !== undefined) {\n    setSpeaking(true);\n    console.log('<speak> speak!', props.sentence);\n    speakTxt(props.sentence);\n    //props.speakOver();\n  }\n\n  return (\n    <form onSubmit={speak}>\n      <select value={voiceIndex} onChange={(e) => {changeVoice(e.target.value)}}>\n        {voices.map((value, index) => {\n          return <option key={index} value={index}>{`${value.name} (${value.lang})`}</option>\n        })}\n      </select>\n      <br/>\n      <label htmlFor='pitch'>pitch</label>\n      <input type='number' step={0.01} value={pitch} onChange={(e)=>{setPitch(e.target.value)}} id='pitch' />\n      <br/>\n      <label htmlFor='rate'>rate</label>\n      <input type='number' step={0.01} value={rate}  onChange={(e)=>{setRate(e.target.value)}} id='rate'/>\n      <input type='submit'></input>\n    </form>\n  );\n}\n\nexport default Speak;\n","import io from 'socket.io-client'\nimport {serverHost} from './config'\n\nlet defaultSocket;\nlet isSocketConnect = false;\n\nlet defaultConnectFn = () => {\n    isSocketConnect = true;\n    console.log('socket connect to server');\n}\n\n/**\n * set default socket for later use.\n *\n * @param   Socket  socket\n */\nexport let setDefaultSocket = (socket)=> {\n    defaultSocket = socket;\n}\n\n/**\n * connect socket with namespace, execute fn function after connect.\n *\n * @param   String  namespace     The namespace of socket io\n * @param   Function  fn          The function to be execute after connection\n * @return  Socket                The willing connect socket;\n */\nexport let connectSocket = (namespace='', fn=defaultConnectFn)=> {\n\n    let socket = io(serverHost+namespace);\n    if (defaultSocket === undefined) defaultSocket = socket;\n    socket.on('connect', fn);\n    return socket;\n}\n\n/**\n * on\n *\n * @param   String      str          The namespace of socket io\n * @param   Function    fn          The function to be execute after connection\n * @return  Socket                  The willing connect socket;\n */\nexport let onSocket = (str, fn, socket=defaultSocket)=> {\n    if (defaultSocket === undefined) return;\n    socket.on(str, fn);\n}\n\n/**\n * Emit Socket with name 'osc'\n *\n * @param   String  address     The specified address string\n * @param   Json  value         The values in JSON format\n */\nexport let emitOSC = (address, value, socket=defaultSocket)=> {\n    socket.emit('osc', {\n        address: address,\n        args: [value]\n    });\n}\n\n/**\n * Emit Socket with name and data\n *\n * @param   String  name     The name for socket emit\n * @param   Json  data       The emit data in JSON format\n */\nexport let emitData = (name, data, socket=defaultSocket)=> {\n    socket.emit(name, data);\n}\n\nexport {isSocketConnect};","import { useEffect, useRef } from 'react';\n\nexport function useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  });\n\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}","export const serverHost = \"https://stage-effect-server1.herokuapp.com\";\n//export const serverHost = \"http://localhost:8000\";","import React, {useState, useEffect} from 'react';\nimport {connectSocket, onSocket, emitData } from '../usages/socketUsage';\nimport Speak from './Speak';\n\nfunction SocketHandler() {\n    const [speak, setSpeak] = useState(false);\n    const [sentence, setSentence] = useState();\n    const [id, setId] = useState(-1);\n    useState(()=> {\n        connectSocket('/receiver');\n        onSocket('debug', (data)=> {\n            console.log(data);\n        }); \n        onSocket('speak', (data)=> {\n            //console.log('speak!', data);\n            if (!speak) {\n                setSentence(data.text);\n                setId(data.id);\n                setSpeak(true);\n            }\n            //TODO: if speak -> do something?   \n        })\n    });\n    let sendDebug = () => {\n        emitData('debug', 'testing');\n    }\n    let speakOver = () => {\n        setSpeak(false);\n        console.log('speak over', id);\n        //emitData('debug', {id: id});\n        emitData('speakover', {id: id});\n    }\n    return (<>\n        <button onClick={sendDebug}></button>\n        <Speak speak={speak} sentence={sentence} speakOver={speakOver}/>\n    </>);\n}\n\nexport default SocketHandler;","import React, {useState, useEffect} from 'react';\nimport '../css/App.css';\nimport Speak from './Speak';\nimport SocketHandler from './SocketHandler';\n\nfunction App() {\n  \n  return (<>\n    <SocketHandler />\n    {/* <Speak /> */}\n  </>);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}