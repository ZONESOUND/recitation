{"version":3,"sources":["usages/tool.js","components/InfoPage.js","components/Speak.js","usages/socketUsage.js","usages/config.js","components/SocketHandler.js","components/LandPage.js","components/Fade.js","components/App.js","serviceWorker.js","index.js"],"names":["useInterval","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","usePrevious","value","ref","InfoPage","props","personName","sentence","Speak","defaultSocket","synth","window","speechSynthesis","useState","getVoices","voices","voiceIndex","changeVoiceIdx","pitch","setPitch","rate","setRate","speaking","setSpeaking","toSpeak","changeVoice","prevSpeak","prevChangeVoice","revealSentence","setRevealSentence","undefined","speakTxt","Math","floor","random","length","onvoiceschanged","v","i","default","speakOver","txt","utterThis","SpeechSynthesisUtterance","voice","speak","form","onSubmit","event","preventDefault","onChange","e","target","map","index","key","name","lang","htmlFor","type","step","serverHost","defaultConnectFn","console","log","connectSocket","namespace","fn","socket","io","on","onSocket","str","emitData","data","emit","SocketHandler","setSpeak","setSentence","setId","setChangeVoice","launch","setLaunch","start","text","setTimeout","LandPage","className","onClick","select","Fade","show","children","shouldRender","setRender","style","animation","onAnimationEnd","App","landing","setLanding","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.495cefe5.chunk.js","sourcesContent":["import { useEffect, useRef } from 'react';\n\nexport function useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  });\n\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n\nexport function usePrevious(value) {\n  // The ref object is a generic container whose current property is mutable ...\n  // ... and can hold any value, similar to an instance property on a class\n  const ref = useRef();\n  \n  // Store current value in ref\n  useEffect(() => {\n    ref.current = value;\n  }, [value]); // Only re-run if value changes\n  \n  // Return previous value (happens before update in useEffect above)\n  return ref.current;\n}","import React, {useState} from 'react';\nimport '../css/InfoPage.css';\n\nfunction InfoPage(props) {\n    return (<div id='infoPage'>\n        <span id='name'> {props.personName}</span>\n        <span id='sentence'> {props.sentence}</span>\n    </div>);\n}\n\nexport default InfoPage;\n","import React, {useState, useEffect} from 'react';\nimport { useInterval, usePrevious } from '../usages/tool';\nimport InfoPage from './InfoPage';\n\nfunction Speak(props) {\n  const synth = window.speechSynthesis;  \n\n  const [voices, getVoices] = useState(synth.getVoices());\n  const [voiceIndex, changeVoiceIdx] = useState(0);\n  const [pitch, setPitch] = useState(1);\n  const [rate, setRate] = useState(1);\n  const [speaking, setSpeaking] = useState(false);\n\n  //const [sentence, setSentence] = useState('');\n  const {toSpeak, sentence, changeVoice} = props;\n  const prevSpeak = usePrevious(toSpeak);\n  const prevChangeVoice = usePrevious(changeVoice);\n  const [revealSentence, setRevealSentence] = useState('');\n  useEffect(()=>{\n    if (!toSpeak || speaking) return;\n    if (prevSpeak !== toSpeak && sentence !== undefined) {\n      speakTxt(sentence);\n    }\n  }, [toSpeak, sentence]);\n\n  useEffect(()=>{\n    if (prevChangeVoice !== changeVoice) {\n      changeVoiceIdx(Math.floor(Math.random()*voices.length));\n    }\n  }, [changeVoice]);\n\n\n  let populateVoice = () => {\n    let v = synth.getVoices();\n    for (var i=0; i<v.length; i++) {\n      if (v[i].default) {\n        changeVoiceIdx(i);\n        break;\n      }\n    }\n    getVoices(v);\n  }\n  synth.onvoiceschanged = populateVoice;\n  useInterval(() => {\n    if (!synth.speaking) {\n        //console.log('finish speak!');\n        props.speakOver();\n        setSpeaking(false);\n    }\n  }, speaking ? 200 : null);\n\n  let submitSpeak = (event) => {\n    event.preventDefault();\n    speakTxt('hello');\n  }\n\n  let speakTxt = (txt) => {\n    setSpeaking(true);\n    setRevealSentence(txt);\n    let utterThis = new SpeechSynthesisUtterance(txt);\n    utterThis.voice = voices[voiceIndex];\n    utterThis.pitch = pitch;\n    utterThis.rate = rate;\n    synth.speak(utterThis);\n\n  }\n\n  // if (!speaking && props.speak && props.sentence !== undefined) {\n  //   setSpeaking(true);\n  //   setSentence(props.sentence);\n  //   console.log('<speak> speak!', props.sentence);\n  //   speakTxt(props.sentence);\n  //   //props.speakOver();\n  // }\n\n  return (\n    <>{props.form &&\n    <form onSubmit={submitSpeak}>\n      <select value={voiceIndex} onChange={(e) => {changeVoiceIdx(e.target.value)}}>\n        {voices.map((value, index) => {\n          return <option key={index} value={index}>{`${value.name} (${value.lang})`}</option>\n        })}\n      </select>\n      <br/>\n      <label htmlFor='pitch'>pitch</label>\n      <input type='number' step={0.01} value={pitch} onChange={(e)=>{setPitch(e.target.value)}} id='pitch' />\n      <br/>\n      <label htmlFor='rate'>rate</label>\n      <input type='number' step={0.01} value={rate}  onChange={(e)=>{setRate(e.target.value)}} id='rate'/>\n      <input type='submit'></input>\n    </form>}\n    <InfoPage personName={voices[voiceIndex] !== undefined ? voices[voiceIndex].name : ''} sentence={revealSentence}/>\n    </>\n  );\n}\n\nexport default Speak;\n","import io from 'socket.io-client'\nimport {serverHost} from './config'\n\nlet defaultSocket;\nlet isSocketConnect = false;\n\nlet defaultConnectFn = () => {\n    isSocketConnect = true;\n    console.log('socket connect to server');\n}\n\n/**\n * set default socket for later use.\n *\n * @param   Socket  socket\n */\nexport let setDefaultSocket = (socket)=> {\n    defaultSocket = socket;\n}\n\n/**\n * connect socket with namespace, execute fn function after connect.\n *\n * @param   String  namespace     The namespace of socket io\n * @param   Function  fn          The function to be execute after connection\n * @return  Socket                The willing connect socket;\n */\nexport let connectSocket = (namespace='', fn=defaultConnectFn)=> {\n\n    let socket = io(serverHost+namespace);\n    if (defaultSocket === undefined) defaultSocket = socket;\n    socket.on('connect', fn);\n    return socket;\n}\n\n/**\n * on\n *\n * @param   String      str          The namespace of socket io\n * @param   Function    fn          The function to be execute after connection\n * @return  Socket                  The willing connect socket;\n */\nexport let onSocket = (str, fn, socket=defaultSocket)=> {\n    if (defaultSocket === undefined) return;\n    socket.on(str, fn);\n}\n\n/**\n * Emit Socket with name 'osc'\n *\n * @param   String  address     The specified address string\n * @param   Json  value         The values in JSON format\n */\nexport let emitOSC = (address, value, socket=defaultSocket)=> {\n    socket.emit('osc', {\n        address: address,\n        args: [value]\n    });\n}\n\n/**\n * Emit Socket with name and data\n *\n * @param   String  name     The name for socket emit\n * @param   Json  data       The emit data in JSON format\n */\nexport let emitData = (name, data, socket=defaultSocket)=> {\n    socket.emit(name, data);\n}\n\nexport {isSocketConnect};","export const serverHost = \"https://stage-effect-server1.herokuapp.com\";\n//export const serverHost = \"http://localhost:8000\";","import React, {useState, useEffect} from 'react';\nimport {connectSocket, onSocket, emitData } from '../usages/socketUsage';\nimport Speak from './Speak';\nimport {useInterval} from '../usages/tool';\n\nfunction SocketHandler(props) {\n    const [speak, setSpeak] = useState(false);\n    const [sentence, setSentence] = useState('');\n    const [id, setId] = useState(-1);\n    const [changeVoice, setChangeVoice] = useState(false);\n    const [launch, setLaunch] = useState(false);\n    useEffect(()=>{\n        if (props.start) {\n            setLaunch(true);\n        }\n    }, [props.start])\n\n    useState(()=> {\n        connectSocket('/receiver');\n        onSocket('debug', (data)=> {\n            console.log(data);\n        }); \n        onSocket('speak', (data)=> {\n            \n            if (!speak) {\n                console.log('speak!', data);\n                setSentence(data.text);\n                setId(data.id);\n                setSpeak(true);\n            }\n            //TODO: if speak -> do something?   \n        });\n        // onSocket('speakconfig', (data)=> {\n        //     console.log(data);\n        //     if (data.mode === 'changeVoice') \n        //         setChangeVoice(!changeVoice);\n        // }); \n    });\n\n    useInterval(() => {\n        setChangeVoice(!changeVoice);\n    }, launch ? 100 : null);\n    \n    setTimeout(()=>{\n        setLaunch(false);\n    }, 2000);\n\n    let sendDebug = () => {\n        emitData('debug', 'testing');\n    }\n    let sendChangeVoice = () => {\n        console.log('send change voice');\n        setChangeVoice(!changeVoice);\n    }\n    let speakOver = () => {\n        setSpeak(false);\n        console.log('speak over', id);\n        //emitData('debug', {id: id});\n        emitData('speakover', {id: id});\n    }\n    return (<>\n        {/* <button onClick={sendChangeVoice}></button> */}\n        <Speak toSpeak={speak} sentence={sentence} speakOver={speakOver} \n                changeVoice={changeVoice} form={false}/>\n    </>);\n}\n\nexport default SocketHandler;","import React, {useState, useEffect} from 'react';\nimport {useInterval} from '../usages/tool';\nimport '../css/LandPage.css';\n//import ReactHtmlParser from 'react-html-parser'; \n\n\nfunction LandPage(props) {\n    return (\n        <div id='LandpageWrapper'>\n            <button className='selectBtn' onClick={props.select}>Start</button>\n        </div>\n    );\n}\n\nexport default LandPage;","import React, { useEffect, useState } from \"react\";\n\nconst Fade = ({ show, children }) => {\n  const [shouldRender, setRender] = useState(show);\n\n  useEffect(() => {\n    if (show) setRender(true);\n  }, [show]);\n\n  const onAnimationEnd = () => {\n    if (!show) setRender(false);\n  };\n\n  return (\n    shouldRender && (\n      <div\n        style={{ animation: `${show ? \"fadeIn\" : \"fadeOut\"} 0.5s` }}\n        onAnimationEnd={onAnimationEnd}\n      >\n        {children}\n      </div>\n    )\n  );\n};\n\nexport default Fade;","import React, {useState, useEffect} from 'react';\nimport '../css/App.css';\nimport Speak from './Speak';\nimport SocketHandler from './SocketHandler';\nimport LandPage from './LandPage';\nimport Fade from './Fade';\n\nfunction App() {\n  const [landing, setLanding] = useState(true);\n  const [speak, setSpeak] = useState(false);\n  let selectStart= () => {\n    setLanding(false);\n    setTimeout(()=>{setSpeak(true)}, 1000);\n  }\n  return (\n  <div>\n    <Fade show={landing}>\n      <LandPage select={selectStart}/>\n    </Fade>\n    <Fade show={speak}>\n      <SocketHandler start={speak}/>\n    </Fade>\n    {/* <Speak /> */}\n  </div>);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}