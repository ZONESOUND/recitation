{"version":3,"sources":["usages/tool.js","components/InfoPage.js","components/Fade.js","usages/cssUsage.js","usages/voiceUsage.js","components/Speak.js","usages/socketUsage.js","usages/config.js","components/SocketHandler.js","components/LandPage.js","components/App.js","serviceWorker.js","index.js"],"names":["useInterval","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","usePrevious","value","ref","InfoSpan","styled","span","props","undefined","fontSize","fontWeight","color","InfoWrapper","div","InfoPage","speaking","num","speakingVoice","length","forEach","v","JSON","parse","name","lang","personName","nameColor","sentence","Fade","show","speed","children","useState","shouldRender","setRender","style","animation","onAnimationEnd","FullDiv","bgColor","excludeName","Set","SpeakForm","onSubmitF","voiceIndex","voiceOnChanged","voices","pitch","rate","pitchOnChanged","rateOnChanged","onSubmit","onChange","e","target","map","index","key","htmlFor","type","step","Speak","defaultSocket","genVoice","synth","getVoices","prevName","i","has","splice","default","changeVoiceIdx","window","speechSynthesis","setVoices","setPitch","setRate","setSpeaking","toSpeak","data","changeVoice","prevSpeak","prevChangeVoice","revealSentence","setRevealSentence","text","speakTxtWithPR","Math","floor","random","changeVoiceCallback","onvoiceschanged","speakOver","speakTxt","txt","utterThis","SpeechSynthesisUtterance","voice","speak","p","r","formProps","event","preventDefault","form","nowSpeak","serverHost","defaultConnectFn","console","log","connectSocket","namespace","fn","socket","io","on","onSocket","str","emitData","emit","SocketHandler","setSpeak","setId","setChangeVoice","launch","setLaunch","showForm","setShowForm","speakData","setSpeakData","setVoice","socketConnect","setSocketConnect","setNowSpeak","changeVoiceEffect","mode","setTimeout","LandPage","className","onClick","select","App","landing","setLanding","start","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.824c31f4.chunk.js","sourcesContent":["import { useEffect, useRef } from 'react';\n\nexport function useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  });\n\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n\nexport function usePrevious(value) {\n  // The ref object is a generic container whose current property is mutable ...\n  // ... and can hold any value, similar to an instance property on a class\n  const ref = useRef();\n  \n  // Store current value in ref\n  useEffect(() => {\n    ref.current = value;\n  }, [value]); // Only re-run if value changes\n  \n  // Return previous value (happens before update in useEffect above)\n  return ref.current;\n}","import React, {useState} from 'react';\nimport styled from 'styled-components'\n\n// css styled component\nconst InfoSpan = styled.span`\n    margin: 1em;\n    width: 80%;\n    text-align: center;\n    min-height: 1.2em;\n    font-size: ${props => \n        props.fontSize === undefined ? '3em' : props.fontSize};\n    font-weight: ${props => \n        props.fontWeight === undefined ? '100' : props.fontWeight};\n    ${props => \n        props.color === undefined ? '' : 'color:'+props.color+';'}\n    `;\nconst InfoWrapper = styled.div`\n    margin: 0 auto;\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    display:flex;\n    justify-content: center;\n    align-items: center;\n    flex-direction: column;\n    `;\n\nfunction InfoPage(props) {\n    const maxLen = 10;\n    let speaking = '';\n    let num = 0;\n    if (props.speakingVoice.length > 0) {\n        props.speakingVoice.forEach((v)=>{\n            v = JSON.parse(v);\n            if (!v.name) return;\n            if (num > maxLen) {\n                return;\n            }\n            if (`${v.name} (${v.lang})` !== props.personName) {\n                num++;\n                if (num > 1) speaking += num == maxLen ? ' and ' : ', ';\n                speaking += v.name;\n            }\n        })\n        if (num > 0) {\n            speaking += num > 1 ? ' are ' : ' is ';\n            speaking += 'speaking...';\n        }\n    }\n\n    return (\n    <InfoWrapper>\n        <InfoSpan color={props.nameColor}>{props.personName}</InfoSpan>\n        <InfoSpan color={'orange'} fontSize={'2em'}>\n            {props.sentence === '' ? '' : `\"${props.sentence}\"`}\n        </InfoSpan>\n        <InfoSpan color={'gray'} fontSize={'1em'}>{speaking}</InfoSpan>\n    </InfoWrapper>);\n}\n\nexport default InfoPage;\n","import React, { useEffect, useState } from \"react\";\n\nconst Fade = ({ show, speed, children }) => {\n    if (speed === undefined) speed = \"0.5s\";\n    const [shouldRender, setRender] = useState(show);\n\n    useEffect(() => {\n        if (show) setRender(true);\n    }, [show]);\n\n    const onAnimationEnd = () => {\n        if (!show) setRender(false);\n    };\n\n    return (\n        shouldRender && (\n        <div\n            style={{ animation: `${show ? \"fadeIn\" : \"fadeOut\"} ${speed}` }}\n            onAnimationEnd={onAnimationEnd}\n        >\n            {children}\n        </div>\n        )\n    );\n};\n\nexport default Fade;","import styled from 'styled-components'\n\nexport const FullDiv = styled.div`\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  display:flex;\n  justify-content: center;\n  align-items: center;\n  z-index: -10;\n  background: ${props => \n    props.bgColor === undefined ? \"white\" : props.bgColor};  \n`;","export let excludeName = new Set([\n    'Amelie', 'Ioana', 'Joana', 'Laura', 'Sara', 'Xander'\n]);\n\nexport let excludeLang = new Set([\n    'fr-CA', 'ro-RO', 'pt-PT', 'sk-SK', 'da-DK', 'nl-NL'\n]);","import React, {useState, useEffect} from 'react';\nimport { useInterval, usePrevious } from '../usages/tool';\nimport InfoPage from './InfoPage';\nimport Fade from './Fade';\nimport {FullDiv} from '../usages/cssUsage';\nimport {excludeName} from '../usages/voiceUsage';\n\n\nfunction Speak(props) {\n  let genVoice = () => {\n    let v = synth.getVoices();\n    let prevName = '';\n    for (var i=0; i<v.length; i++) {\n      while ((excludeName.has(v[i].name) || v[i].name === prevName) && i<v.length) v.splice(i, 1);\n      prevName = v[i].name;\n      if (v[i].default) changeVoiceIdx(i);\n    }\n    return v;\n  }\n\n  const synth = window.speechSynthesis;  \n  const [voiceIndex, changeVoiceIdx] = useState(0);\n  const [voices, setVoices] = useState(()=>{return genVoice();});\n  const [pitch, setPitch] = useState(1);\n  const [rate, setRate] = useState(1);\n  const [speaking, setSpeaking] = useState(false);\n\n  //const [sentence, setSentence] = useState('');\n  const {toSpeak, data, changeVoice} = props;\n  const prevSpeak = usePrevious(toSpeak);\n  const prevChangeVoice = usePrevious(changeVoice);\n  const [revealSentence, setRevealSentence] = useState('');\n\n  useEffect(()=>{\n    if (!toSpeak || speaking) return;\n    if (prevSpeak !== toSpeak && data.text) {\n      if (data.rate) setRate(data.rate);\n      if (data.pitch) setPitch(data.pitch);\n      //speakTxt(data.text);\n      speakTxtWithPR(data.text, data.pitch?data.pitch:pitch, data.rate?data.rate:rate);\n    }\n  }, [toSpeak, data]);\n\n  useEffect(()=>{\n    if (prevChangeVoice !== changeVoice) {\n      changeVoiceIdx(Math.floor(Math.random()*voices.length));\n    }\n  }, [changeVoice]);\n\n  useEffect(()=>{\n    props.changeVoiceCallback({name:voices[voiceIndex].name, lang:voices[voiceIndex].lang});\n  }, [voiceIndex]);\n\n  let populateVoice = () => {\n    setVoices(genVoice());\n  }\n  synth.onvoiceschanged = populateVoice;\n  useInterval(() => {\n    if (!synth.speaking) {\n        //console.log('finish speak!');\n        props.speakOver();\n        setSpeaking(false);\n        setRevealSentence(\"\");\n    }\n  }, speaking ? 100 : null);\n\n  let submitSpeak = (event) => {\n    event.preventDefault();\n    speakTxt('hello');\n  }\n\n  let speakTxt = (txt) => {\n    setSpeaking(true);\n    setRevealSentence(txt);\n    let utterThis = new SpeechSynthesisUtterance(txt);\n    utterThis.voice = voices[voiceIndex];\n    utterThis.pitch = pitch;\n    utterThis.rate = rate;\n    synth.speak(utterThis);\n  }\n\n  let speakTxtWithPR = (txt, p, r) => {\n    setSpeaking(true);\n    setRevealSentence(txt);\n    let utterThis = new SpeechSynthesisUtterance(txt);\n    utterThis.voice = voices[voiceIndex];\n    utterThis.pitch = p;\n    utterThis.rate = r;\n    synth.speak(utterThis);\n  }\n\n  const formProps = {\n    onSubmitF: submitSpeak,\n    voiceIndex: voiceIndex, \n    voiceOnChanged: changeVoiceIdx, \n    voices: voices, \n    pitch: pitch, \n    rate: rate, \n    pitchOnChanged: setPitch, \n    rateOnChanged: setRate\n  }\n\n  let personName = voices[voiceIndex] !== undefined ? \n        `${voices[voiceIndex].name} (${voices[voiceIndex].lang})` : '';\n\n  return (\n    <>\n      {props.form && <SpeakForm {...formProps}/>}\n      <InfoPage personName={personName} \n        sentence={revealSentence} speakingVoice={props.nowSpeak} nameColor={speaking ? 'black': 'white'} /> \n      <Fade show={speaking} speed={'0.3s'}>\n        <FullDiv/>\n      </Fade>\n    </>\n  );\n}\n\nfunction SpeakForm(props) {\n  const {onSubmitF, voiceIndex, \n        voiceOnChanged, voices, pitch, rate, \n        pitchOnChanged, rateOnChanged} = props;\n  return (\n    <form onSubmit={onSubmitF}>\n      <select value={voiceIndex} onChange={(e) => {voiceOnChanged(e.target.value)}}>\n        {voices.map((value, index) => {\n          return <option key={index} value={index}>{`${value.name} (${value.lang})`}</option>\n        })}\n      </select>\n      <br/>\n      <label htmlFor='pitch'>pitch</label>\n      <input type='number' step={0.01} value={pitch} onChange={(e)=>{pitchOnChanged(e.target.value)}} id='pitch' />\n      <br/>\n      <label htmlFor='rate'>rate</label>\n      <input type='number' step={0.01} value={rate}  onChange={(e)=>{rateOnChanged(e.target.value)}} id='rate'/>\n      <input type='submit'></input>\n    </form>\n  )\n}\n\nexport default Speak;\n","import io from 'socket.io-client'\nimport {serverHost} from './config'\n\nlet defaultSocket;\nlet isSocketConnect = false;\n\nlet defaultConnectFn = () => {\n    isSocketConnect = true;\n    console.log('socket connect to server');\n}\n\n/**\n * set default socket for later use.\n *\n * @param   Socket  socket\n */\nexport let setDefaultSocket = (socket)=> {\n    defaultSocket = socket;\n}\n\n/**\n * connect socket with namespace, execute fn function after connect.\n *\n * @param   String  namespace     The namespace of socket io\n * @param   Function  fn          The function to be execute after connection\n * @return  Socket                The willing connect socket;\n */\nexport let connectSocket = (namespace='', fn=defaultConnectFn)=> {\n\n    let socket = io(serverHost+namespace);\n    if (defaultSocket === undefined) defaultSocket = socket;\n    socket.on('connect', fn);\n    return socket;\n}\n\n/**\n * on\n *\n * @param   String      str          The namespace of socket io\n * @param   Function    fn          The function to be execute after connection\n * @return  Socket                  The willing connect socket;\n */\nexport let onSocket = (str, fn, socket=defaultSocket)=> {\n    if (defaultSocket === undefined) return;\n    socket.on(str, fn);\n}\n\n/**\n * Emit Socket with name 'osc'\n *\n * @param   String  address     The specified address string\n * @param   Json  value         The values in JSON format\n */\nexport let emitOSC = (address, value, socket=defaultSocket)=> {\n    socket.emit('osc', {\n        address: address,\n        args: [value]\n    });\n}\n\n/**\n * Emit Socket with name and data\n *\n * @param   String  name     The name for socket emit\n * @param   Json  data       The emit data in JSON format\n */\nexport let emitData = (name, data, socket=defaultSocket)=> {\n    socket.emit(name, data);\n}\n\nexport {isSocketConnect};","export const serverHost = \"https://stage-effect-server1.herokuapp.com\";\n//export const serverHost = \"http://localhost:8000\";","import React, {useState, useEffect} from 'react';\nimport {connectSocket, onSocket, emitData, isSocketConnect } from '../usages/socketUsage';\nimport Speak from './Speak';\nimport {useInterval} from '../usages/tool';\nimport Fade from './Fade';\nimport {FullDiv} from '../usages/cssUsage';\n\nfunction SocketHandler(props) {\n    const [speak, setSpeak] = useState(false);\n    const [id, setId] = useState(-1);\n    const [changeVoice, setChangeVoice] = useState(false);\n    const [launch, setLaunch] = useState(false);\n    const [showForm, setShowForm] = useState(false);\n    const [speakData, setSpeakData] = useState({});\n    const [voice, setVoice] = useState(); \n    const [socketConnect, setSocketConnect] = useState(null);\n    const [nowSpeak, setNowSpeak] = useState([]);\n\n    useEffect(()=>{\n        //if (props.start && socketConnect) {\n        if (socketConnect) {\n            changeVoiceEffect();\n        }\n    }, [socketConnect])\n\n    //check if user changed\n    useEffect(() => {\n        if (!launch && voice) {\n            console.log('emit voice!');\n            emitData('speakConfig', {mode: 'changeVoice', voice: voice});\n        }\n    }, [launch, voice])\n\n    useState(()=> {\n        connectSocket('/receiver', ()=>{setSocketConnect(true);});\n        onSocket('disconnect', ()=>{\n            setSocketConnect(false);\n        })\n        onSocket('debug', (data)=> {\n            console.log(data);\n            if (data.mode === 'showForm') \n                setShowForm(data.value);\n        }); \n        onSocket('speak', (data)=> {\n            \n            if (!speak) {\n                console.log('speak!', data);\n                //setSentence(data.text);\n                setSpeakData(data);\n                setId(data.id);\n                setSpeak(true);\n            }\n            //TODO: if speak -> do something?   \n        });\n        onSocket('speakConfig', (data)=> {\n            console.log(data);\n            if (data.mode === 'changeVoice') \n                changeVoiceEffect();\n            else if (data.mode === 'showForm')\n                setShowForm(true);\n            else if (data.mode === 'hideForm') \n                setShowForm(false);\n            else if (data.mode === 'nowSpeak')\n                setNowSpeak(data.data);\n        }); \n    });\n\n    useInterval(() => {\n        setChangeVoice(!changeVoice);\n    }, launch ? 100 : null);\n\n    let changeVoiceEffect = () => {\n        setLaunch(true);\n        setTimeout(()=>{\n            setLaunch(false);\n        }, 2000);\n    }\n\n    let sendDebug = () => {\n        emitData('debug', 'testing');\n    }\n    let sendChangeVoice = () => {\n        console.log('send change voice');\n        setChangeVoice(!changeVoice);\n    }\n    let speakOver = () => {\n        setSpeak(false);\n        console.log('speak over', id);\n        //emitData('debug', {id: id});\n        if (id !== -1)\n            emitData('speakOver', {id: id, voice: voice});\n    }\n    let changeVoiceCallback = (voice) => {\n        setVoice(voice);\n    }\n    \n    return (<>\n        {/* <button onClick={sendChangeVoice}></button> */}\n        <Fade show={socketConnect}>\n            <Speak toSpeak={speak} data={speakData} speakOver={speakOver} \n                    changeVoice={changeVoice} changeVoiceCallback={changeVoiceCallback}\n                    nowSpeak={nowSpeak} form={showForm}/>\n        </Fade>\n        <Fade show={socketConnect===false}>\n            <FullDiv bgColor=\"black\"><span>{'CONNECTING SERVER'}</span></FullDiv>\n        </Fade>\n    </>);\n}\n\nexport default SocketHandler;","import React, {useState, useEffect} from 'react';\nimport {useInterval} from '../usages/tool';\nimport '../css/LandPage.css';\n//import ReactHtmlParser from 'react-html-parser'; \n\n\nfunction LandPage(props) {\n    return (\n        <div id='LandpageWrapper'>\n            <button className='selectBtn' onClick={props.select}>Start</button>\n        </div>\n    );\n}\n\nexport default LandPage;","import React, {useState, useEffect} from 'react';\nimport '../css/App.css';\nimport Speak from './Speak';\nimport SocketHandler from './SocketHandler';\nimport LandPage from './LandPage';\nimport Fade from './Fade';\n\nfunction App() {\n  const [landing, setLanding] = useState(true);\n  const [speak, setSpeak] = useState(false);\n  let selectStart= () => {\n    setLanding(false);\n    setSpeak(true);\n\n    //not sure where to put this...\n    window.speechSynthesis.speak(new SpeechSynthesisUtterance(''));\n  }\n  return (\n  <div>\n    <Fade show={landing}>\n      <LandPage select={selectStart}/>\n    </Fade>\n    <Fade show={speak}>\n      <SocketHandler start={speak}/>\n    </Fade>\n    {/* <Speak /> */}\n  </div>);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}