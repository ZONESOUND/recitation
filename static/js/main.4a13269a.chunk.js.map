{"version":3,"sources":["usages/tool.js","components/InfoPage.js","components/Fade.js","components/Speak.js","usages/socketUsage.js","usages/config.js","components/SocketHandler.js","components/LandPage.js","components/App.js","serviceWorker.js","index.js"],"names":["useInterval","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","usePrevious","value","ref","InfoSpan","styled","span","props","undefined","fontSize","fontWeight","color","InfoWrapper","div","InfoPage","nameColor","personName","sentence","Fade","show","speed","children","useState","shouldRender","setRender","style","animation","onAnimationEnd","FullDiv","bgColor","SpeakForm","onSubmitF","voiceIndex","voiceOnChanged","voices","pitch","rate","pitchOnChanged","rateOnChanged","console","log","onSubmit","onChange","e","target","map","index","key","name","lang","htmlFor","type","step","Speak","defaultSocket","synth","window","speechSynthesis","getVoices","setVoices","changeVoiceIdx","setPitch","setRate","speaking","setSpeaking","toSpeak","data","changeVoice","prevSpeak","prevChangeVoice","revealSentence","setRevealSentence","text","speakTxtWithPR","Math","floor","random","length","onvoiceschanged","v","i","default","speakOver","speakTxt","txt","utterThis","SpeechSynthesisUtterance","voice","speak","p","r","formProps","event","preventDefault","form","serverHost","defaultConnectFn","connectSocket","namespace","fn","socket","io","on","onSocket","str","emitData","emit","SocketHandler","setSpeak","setId","setChangeVoice","launch","setLaunch","showForm","setShowForm","speakData","setSpeakData","start","changeVoiceEffect","mode","setTimeout","LandPage","className","onClick","select","App","landing","setLanding","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4a13269a.chunk.js","sourcesContent":["import { useEffect, useRef } from 'react';\n\nexport function useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  });\n\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n\nexport function usePrevious(value) {\n  // The ref object is a generic container whose current property is mutable ...\n  // ... and can hold any value, similar to an instance property on a class\n  const ref = useRef();\n  \n  // Store current value in ref\n  useEffect(() => {\n    ref.current = value;\n  }, [value]); // Only re-run if value changes\n  \n  // Return previous value (happens before update in useEffect above)\n  return ref.current;\n}","import React, {useState} from 'react';\nimport styled from 'styled-components'\n\n// css styled component\nconst InfoSpan = styled.span`\n    margin: 1em;\n    width: 80%;\n    text-align: center;\n    min-height: 1.2em;\n    font-size: ${props => \n        props.fontSize === undefined ? '3em' : props.fontSize};\n    font-weight: ${props => \n        props.fontWeight === undefined ? '100' : props.fontWeight};\n    ${props => \n        props.color === undefined ? '' : 'color:'+props.color+';'}\n    `;\nconst InfoWrapper = styled.div`\n    margin: 0 auto;\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    display:flex;\n    justify-content: center;\n    align-items: center;\n    flex-direction: column;\n    `;\n\nfunction InfoPage(props) {\n\n    return (\n    <InfoWrapper>\n        <InfoSpan color={props.nameColor}>{props.personName}</InfoSpan>\n        <InfoSpan color={'orange'} fontSize={'2em'}>\n            {props.sentence === '' ? '' : `\"${props.sentence}\"`}\n        </InfoSpan>\n    </InfoWrapper>);\n}\n\nexport default InfoPage;\n","import React, { useEffect, useState } from \"react\";\n\nconst Fade = ({ show, speed, children }) => {\n    if (speed === undefined) speed = \"0.5s\";\n    const [shouldRender, setRender] = useState(show);\n\n    useEffect(() => {\n        if (show) setRender(true);\n    }, [show]);\n\n    const onAnimationEnd = () => {\n        if (!show) setRender(false);\n    };\n\n    return (\n        shouldRender && (\n        <div\n            style={{ animation: `${show ? \"fadeIn\" : \"fadeOut\"} ${speed}` }}\n            onAnimationEnd={onAnimationEnd}\n        >\n            {children}\n        </div>\n        )\n    );\n};\n\nexport default Fade;","import React, {useState, useEffect} from 'react';\nimport { useInterval, usePrevious } from '../usages/tool';\nimport InfoPage from './InfoPage';\nimport Fade from './Fade';\nimport styled from 'styled-components'\n\nconst FullDiv = styled.div`\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  z-index: -10;\n  background: ${props => \n    props.bgColor === undefined ? \"white\" : props.bgColor};  \n`\n\n\nfunction Speak(props) {\n  const synth = window.speechSynthesis;  \n\n  const [voices, setVoices] = useState(synth.getVoices());\n  const [voiceIndex, changeVoiceIdx] = useState(0);\n  const [pitch, setPitch] = useState(1);\n  const [rate, setRate] = useState(1);\n  const [speaking, setSpeaking] = useState(false);\n\n  //const [sentence, setSentence] = useState('');\n  const {toSpeak, data, changeVoice} = props;\n  const prevSpeak = usePrevious(toSpeak);\n  const prevChangeVoice = usePrevious(changeVoice);\n  const [revealSentence, setRevealSentence] = useState('');\n\n  useEffect(()=>{\n    if (!toSpeak || speaking) return;\n    if (prevSpeak !== toSpeak && data.text) {\n      if (data.rate) setRate(data.rate);\n      if (data.pitch) setPitch(data.pitch);\n      //speakTxt(data.text);\n      speakTxtWithPR(data.text, data.pitch?data.pitch:pitch, data.rate?data.rate:rate);\n    }\n  }, [toSpeak, data]);\n\n  useEffect(()=>{\n    if (prevChangeVoice !== changeVoice) {\n      changeVoiceIdx(Math.floor(Math.random()*voices.length));\n    }\n  }, [changeVoice]);\n\n  let populateVoice = () => {\n    let v = synth.getVoices();\n    for (var i=0; i<v.length; i++) {\n      if (v[i].default) {\n        changeVoiceIdx(i);\n        break;\n      }\n    }\n    setVoices(v);\n  }\n  synth.onvoiceschanged = populateVoice;\n  useInterval(() => {\n    if (!synth.speaking) {\n        //console.log('finish speak!');\n        props.speakOver();\n        setSpeaking(false);\n    }\n  }, speaking ? 100 : null);\n\n  let submitSpeak = (event) => {\n    event.preventDefault();\n    speakTxt('hello');\n  }\n\n  let speakTxt = (txt) => {\n    setSpeaking(true);\n    setRevealSentence(txt);\n    let utterThis = new SpeechSynthesisUtterance(txt);\n    utterThis.voice = voices[voiceIndex];\n    utterThis.pitch = pitch;\n    utterThis.rate = rate;\n    synth.speak(utterThis);\n  }\n\n  let speakTxtWithPR = (txt, p, r) => {\n    setSpeaking(true);\n    setRevealSentence(txt);\n    let utterThis = new SpeechSynthesisUtterance(txt);\n    utterThis.voice = voices[voiceIndex];\n    utterThis.pitch = p;\n    utterThis.rate = r;\n    synth.speak(utterThis);\n  }\n\n  const formProps = {\n    onSubmitF: submitSpeak,\n    voiceIndex: voiceIndex, \n    voiceOnChanged: changeVoiceIdx, \n    voices: voices, \n    pitch: pitch, \n    rate: rate, \n    pitchOnChanged: setPitch, \n    rateOnChanged: setRate\n  }\n\n  let personName = voices[voiceIndex] !== undefined ? \n        `${voices[voiceIndex].name} (${voices[voiceIndex].lang})` : '';\n\n  return (\n    <>\n      {props.form && <SpeakForm {...formProps}/>}\n      <InfoPage personName={personName} \n        sentence={revealSentence} nameColor={speaking ? 'black': 'white'} /> \n      <Fade show={speaking} speed={'0.3s'}>\n        <FullDiv/>\n      </Fade>\n    </>\n  );\n}\n\nfunction SpeakForm(props) {\n  const {onSubmitF, voiceIndex, \n        voiceOnChanged, voices, pitch, rate, \n        pitchOnChanged, rateOnChanged} = props;\n  console.log('speak form', voiceIndex);\n  return (\n    <form onSubmit={onSubmitF}>\n      <select value={voiceIndex} onChange={(e) => {voiceOnChanged(e.target.value)}}>\n        {voices.map((value, index) => {\n          return <option key={index} value={index}>{`${value.name} (${value.lang})`}</option>\n        })}\n      </select>\n      <br/>\n      <label htmlFor='pitch'>pitch</label>\n      <input type='number' step={0.01} value={pitch} onChange={(e)=>{pitchOnChanged(e.target.value)}} id='pitch' />\n      <br/>\n      <label htmlFor='rate'>rate</label>\n      <input type='number' step={0.01} value={rate}  onChange={(e)=>{rateOnChanged(e.target.value)}} id='rate'/>\n      <input type='submit'></input>\n    </form>\n  )\n}\n\nexport default Speak;\n","import io from 'socket.io-client'\nimport {serverHost} from './config'\n\nlet defaultSocket;\nlet isSocketConnect = false;\n\nlet defaultConnectFn = () => {\n    isSocketConnect = true;\n    console.log('socket connect to server');\n}\n\n/**\n * set default socket for later use.\n *\n * @param   Socket  socket\n */\nexport let setDefaultSocket = (socket)=> {\n    defaultSocket = socket;\n}\n\n/**\n * connect socket with namespace, execute fn function after connect.\n *\n * @param   String  namespace     The namespace of socket io\n * @param   Function  fn          The function to be execute after connection\n * @return  Socket                The willing connect socket;\n */\nexport let connectSocket = (namespace='', fn=defaultConnectFn)=> {\n\n    let socket = io(serverHost+namespace);\n    if (defaultSocket === undefined) defaultSocket = socket;\n    socket.on('connect', fn);\n    return socket;\n}\n\n/**\n * on\n *\n * @param   String      str          The namespace of socket io\n * @param   Function    fn          The function to be execute after connection\n * @return  Socket                  The willing connect socket;\n */\nexport let onSocket = (str, fn, socket=defaultSocket)=> {\n    if (defaultSocket === undefined) return;\n    socket.on(str, fn);\n}\n\n/**\n * Emit Socket with name 'osc'\n *\n * @param   String  address     The specified address string\n * @param   Json  value         The values in JSON format\n */\nexport let emitOSC = (address, value, socket=defaultSocket)=> {\n    socket.emit('osc', {\n        address: address,\n        args: [value]\n    });\n}\n\n/**\n * Emit Socket with name and data\n *\n * @param   String  name     The name for socket emit\n * @param   Json  data       The emit data in JSON format\n */\nexport let emitData = (name, data, socket=defaultSocket)=> {\n    socket.emit(name, data);\n}\n\nexport {isSocketConnect};","export const serverHost = \"https://stage-effect-server1.herokuapp.com\";\n//export const serverHost = \"http://localhost:8000\";","import React, {useState, useEffect} from 'react';\nimport {connectSocket, onSocket, emitData } from '../usages/socketUsage';\nimport Speak from './Speak';\nimport {useInterval} from '../usages/tool';\n\nfunction SocketHandler(props) {\n    const [speak, setSpeak] = useState(false);\n    const [sentence, setSentence] = useState('');\n    const [id, setId] = useState(-1);\n    const [changeVoice, setChangeVoice] = useState(false);\n    const [launch, setLaunch] = useState(false);\n    const [showForm, setShowForm] = useState(true);\n    const [speakData, setSpeakData] = useState({});\n\n    useEffect(()=>{\n        if (props.start) {\n            //setLaunch(true);\n            changeVoiceEffect();\n        }\n    }, [props.start])\n\n    useState(()=> {\n        connectSocket('/receiver');\n        onSocket('debug', (data)=> {\n            console.log(data);\n            if (data.mode === 'showForm') \n                setShowForm(data.value);\n        }); \n        onSocket('speak', (data)=> {\n            \n            if (!speak) {\n                console.log('speak!', data);\n                //setSentence(data.text);\n                setSpeakData(data);\n                setId(data.id);\n                setSpeak(true);\n            }\n            //TODO: if speak -> do something?   \n        });\n        onSocket('speakConfig', (data)=> {\n            console.log(data);\n            if (data.mode === 'changeVoice') \n                changeVoiceEffect();\n        }); \n    });\n\n    useInterval(() => {\n        setChangeVoice(!changeVoice);\n    }, launch ? 100 : null);\n\n    let changeVoiceEffect = () => {\n        setLaunch(true);\n        setTimeout(()=>{\n            setLaunch(false);\n        }, 2000);\n    }\n    \n\n    let sendDebug = () => {\n        emitData('debug', 'testing');\n    }\n    let sendChangeVoice = () => {\n        console.log('send change voice');\n        setChangeVoice(!changeVoice);\n    }\n    let speakOver = () => {\n        setSpeak(false);\n        console.log('speak over', id);\n        //emitData('debug', {id: id});\n        if (id !== -1)\n            emitData('speakOver', {id: id});\n    }\n    \n    return (<>\n        {/* <button onClick={sendChangeVoice}></button> */}\n        <Speak toSpeak={speak} data={speakData} speakOver={speakOver} \n                changeVoice={changeVoice} form={showForm}/>\n    </>);\n}\n\nexport default SocketHandler;","import React, {useState, useEffect} from 'react';\nimport {useInterval} from '../usages/tool';\nimport '../css/LandPage.css';\n//import ReactHtmlParser from 'react-html-parser'; \n\n\nfunction LandPage(props) {\n    return (\n        <div id='LandpageWrapper'>\n            <button className='selectBtn' onClick={props.select}>Start</button>\n        </div>\n    );\n}\n\nexport default LandPage;","import React, {useState, useEffect} from 'react';\nimport '../css/App.css';\nimport Speak from './Speak';\nimport SocketHandler from './SocketHandler';\nimport LandPage from './LandPage';\nimport Fade from './Fade';\n\nfunction App() {\n  const [landing, setLanding] = useState(true);\n  const [speak, setSpeak] = useState(false);\n  let selectStart= () => {\n    setLanding(false);\n    setTimeout(()=>{setSpeak(true)}, 1000);\n\n    //not sure where to put this...\n    window.speechSynthesis.speak(new SpeechSynthesisUtterance(''));\n  }\n  return (\n  <div>\n    <Fade show={landing}>\n      <LandPage select={selectStart}/>\n    </Fade>\n    <Fade show={speak}>\n      <SocketHandler start={speak}/>\n    </Fade>\n    {/* <Speak /> */}\n  </div>);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}